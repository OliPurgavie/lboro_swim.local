/*========================================
GRID
========================================*/

.product-border {
  border: 1px solid #ddd;
  border-radius: 10px;
  -moz-box-shadow: 0px 0px 6px 2px #ccc;
  -webkit-box-shadow: 0px 0px 6px 2px #ccc;
  box-shadow: 0px 0px 6px 2px #ccc;
}

/**
 * Layout
 */

.grid {
  @include clearfix();
}

[class*=span],
.grid__cell {
  float: left;
  display: inline;
  min-height: 1px;
  width: 100%;

  &.grid__cell--rev {
    float: right;
  }
}

.grid--collapse {
  margin-left: 0;

  .grid__cell {
    padding-left: 0;
  }
}

.grid--expand {
  @include media-query(min, $lap-start) {
    margin-left: -($spacing-base * 2);
  }

  [class*=span],
  .grid__cell {
    @include media-query(min, $lap-start) {
      padding-left: $spacing-base * 2;
    }
  }
}

//
// Column widths
//
@mixin context-widths($context, $gutter, $grids) {
  @each $grid in $grids {
    $one_col: (100% - ($gutter * $grid)) / $grid;

    @for $i from 1 through $grid {
      .#{$context}-#{$grid}-#{$i} {
        width: ($i / $grid) * 100%;
        *width: (($i / $grid) * 100%) - $gutter-percent;
      }
    }
  }
}

//
// Offsets
//
@mixin context-offsets($context, $gutter, $grids) {
  @each $grid in $grids {
    $one_col: (100% - ($gutter * $grid)) / $grid;

    @for $i from 0 through $grid {
      .#{$context}-offset-#{$grid}-#{$i} {
        margin-left: ($i / $grid) * 100%;
      }
      .#{$context}-offset-#{$grid}-#{$i}-right {
        margin-right: ($i / $grid) * 100%;
      }
    }
  }
}

//
// Blockgrids
//
@mixin context-blockgrids($context, $gutter, $grids) {
  @each $grid in $grids {
    .#{$context}-#{$grid}up > .grid__cell,
    .#{$context}-#{$grid}up > .grid__item {
      width: (1 / $grid) * 100%;
    }
    .#{$context}-#{$grid}up > .grid__cell:nth-child(#{$grid}n+1) {
      clear: left;
    }
  }
}

//
// Row clearing
//
@mixin context-clears($context) {
  .#{$context}-row-clear {
    clear: left;
  }
}

//
// Breakpoint specific grid generator
//
@each $breakpoint in $breakpoints {
  $context: nth($breakpoint, 1);
  $min: nth($breakpoint, 2);
  $max: nth($breakpoint, 3);
  $gutter: nth($breakpoint, 4);
  $grids: nth($breakpoint, 5);

  @include media-query(min, $min) {
    @include context-widths($context, $gutter, $grids);
    @include context-offsets($context, $gutter, $grids);
  }

  @include media-query-bracket($min, $max) {
    @include context-blockgrids($context, $gutter, $blockgrids);
    @include context-clears($context);
  }
}
